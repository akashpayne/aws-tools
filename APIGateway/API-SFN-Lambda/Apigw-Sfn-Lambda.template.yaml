# Stack name: K-SFN-API
AWSTemplateFormatVersion: '2010-09-09'
Description: Create a API gateway placeholder and the Step Function and Lambda function with dummy content.

Parameters:
  ApigwName:
    Description: Name of the API to create
    Type: String
    Default: K-SFN-API
  SfnFunctionName:
    Description: Name of the Lambda function to be invoked from SFN.
    Type: String
    Default: K-SFN-Function-A
  ApigwFunctionName:
    Description: Name of the Lambda function to be invoked from APIGW.
    Type: String
    Default: K-SFN-Function-B
  FunctionTracingConfigMode:
    Description: TracingConfig Mode
    Type: String
    AllowedValues: ["Active", "PassThrough"]
    Default: PassThrough
  LogRetention:
    Description: Days to keep application logs
    Type: Number
    Default: 1
  StateMachineName:
    Description: Name of the State Machine to create.
    Type: String
    Default: K-SFN-StateMachine
  StateMachineTracing:
    Description: Enable State Machine tracing
    Type: String
    AllowedValues: ["true", "false"]
    Default: "false"

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub ${ApigwName}-Lambda-ExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:DescribeExecution
                Resource: arn:aws:states:ap-southeast-2:818427450946:execution:K-SFN-StateMachine*
      RoleName: !Sub ${ApigwName}-Lambda-ExecutionRole

  SfnFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              # This function will be updated through CI/CD
              return "Lambda version 1"
      FunctionName: !Ref SfnFunctionName
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 900
      TracingConfig:
        Mode: !Ref FunctionTracingConfigMode

  SfnFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SfnFunction}
      RetentionInDays: !Ref LogRetention

  ApigwFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import logging
          import os
          import time
          import boto3

          SFN_ARN = os.environ["sfnArn"]
          EXE_ARN = SFN_ARN.replace(":stateMachine:", ":execution:")

          sfn_client = boto3.client("stepfunctions")


          def lambda_response(message, status_code=200):
              logging.info(message)
              return {
                  "body": json.dumps(message),
                  "headers": {"Content-Type": "application/json"},
                  "statusCode": status_code,
              }


          def lambda_handler(event, context):
              logging.info(event)
              logging.info(SFN_ARN)

              params = event["queryStringParameters"]
              eid = params.get("eid")

              if eid:
                  resp = sfn_client.describe_execution(executionArn=f"{EXE_ARN}:{eid}")
                  while resp["status"] == "RUNNING":
                      print(resp.get("output"))
                      time.sleep(1)
                      resp = sfn_client.describe_execution(executionArn=f"{EXE_ARN}:{eid}")

                  print(resp.get("output"))
                  return lambda_response(resp.get("output"))

              return lambda_response({"message": f"Returned from lambda B {eid}"})

      Environment:
        Variables:
          sfnArn: !Ref StateMachine
      FunctionName: !Ref ApigwFunctionName
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 900
      TracingConfig:
        Mode: !Ref FunctionTracingConfigMode

  ApigwFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ApigwFunction}
      RetentionInDays: !Ref LogRetention

  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${StateMachineName}-ExecutionRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SfnFunctionName}*"
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*"
              - Effect: Allow
                Action:
                  - xray:Put*
                Resource: "*"
      RoleName: !Sub ${StateMachineName}-ExecuteRole

  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${StateMachineName}-Logs
      RetentionInDays: !Ref LogRetention

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "A Hello World example using an AWS Lambda function",
              "StartAt": "HelloWorld",
              "States": {
                "HelloWorld": {
                  "Type": "Task",
                  "Resource": "${lambdaArn}",
                  "End": true
                }
              }
            }
          - {lambdaArn: !GetAtt SfnFunction.Arn}
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn
        IncludeExecutionData: true
        Level: ERROR
      RoleArn: !GetAtt StateMachineExecutionRole.Arn
      StateMachineName: !Ref StateMachineName
      StateMachineType: STANDARD
      TracingConfiguration:
        Enabled: !Ref StateMachineTracing

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApigwName
      Description: !Ref ApigwName
      FailOnWarnings: true

  ApigExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ApigwName}-ExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${ApigwName}-Lambda-ExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ApigwFunction}*"
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:DescribeExecution
                Resource:
                  - !Ref StateMachine
                  - !Sub "${StateMachine}:*"

  #ApiGatewayInvokeLambdaPermission:
  #  Type: AWS::Lambda::Permission
  #  Properties:
  #    Action: lambda:InvokeFunction
  #    FunctionName: !GetAtt ApigwFunction.Arn
  #    Principal: apigateway.amazonaws.com
  #    SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/execution"
