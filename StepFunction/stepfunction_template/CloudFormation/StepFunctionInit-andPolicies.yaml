AWSTemplateFormatVersion: '2010-09-09'
Description: Create Step Function and Lambda function with dummy content, create Managed
  Policies for updating and deploying the State Machine and the Lambda function.
Parameters:
  StateMachineName:
    Description: Name of the State Machine to create
    Type: String
    Default: MyService-StateMachine
  InternalGroupDev:
    Description: Existing IAM Group for developers to run tests and update resources.
    Type: String
    Default: DEV-MyService
  LambdaArn:
    Description: ARN of the existing Lambda Function.
    Type: String
Resources:
  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - !Ref 'StateMachineName'
          - ExecuteRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'states.${AWS::Region}.amazonaws.com'
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    DependsOn:
      - StatesExecutionRole
    Properties:
      StateMachineName: !Ref 'StateMachineName'
      DefinitionString: '{ "StartAt": "Hello", "States": { "Hello" : { "Type": "Pass",
        "Result": "Hello!", "End": true } } }'
      RoleArn: !GetAtt 'StatesExecutionRole.Arn'
  StateMachineExecutePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed Policy for starting new execution
      ManagedPolicyName: !Join
        - '-'
        - - !Ref 'StateMachineName'
          - Execute
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
              - states:DescribeExecution
            Resource:
              - !Join
                - ':'
                - - arn:aws:states
                  - !Ref 'AWS::Region'
                  - !Ref 'AWS::AccountId'
                  - stateMachine
                  - !Ref 'StateMachineName'
              - !Join
                - ':'
                - - arn:aws:states
                  - !Ref 'AWS::Region'
                  - !Ref 'AWS::AccountId'
                  - execution
                  - !Ref 'StateMachineName'
                  - '*'
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Ref 'LambdaArn'
  StateMachineExecuteAndDeployPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed Policy for creating/updating the specified lambda function
      ManagedPolicyName: !Join
        - '-'
        - - !Ref 'StateMachineName'
          - ExecuteAndDeploy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
              - states:DescribeExecution
              - states:UpdateStateMachine
            Resource:
              - !Join
                - ':'
                - - arn:aws:states
                  - !Ref 'AWS::Region'
                  - !Ref 'AWS::AccountId'
                  - stateMachine
                  - !Ref 'StateMachineName'
              - !Join
                - ':'
                - - arn:aws:states
                  - !Ref 'AWS::Region'
                  - !Ref 'AWS::AccountId'
                  - execution
                  - !Ref 'StateMachineName'
                  - '*'
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Ref 'LambdaArn'
      Groups:
        - !Ref 'InternalGroupDev'
Outputs:
  StateMachineArn:
    Value: !Ref 'StateMachine'
  StateMachineName:
    Value: !GetAtt 'StateMachine.Name'
