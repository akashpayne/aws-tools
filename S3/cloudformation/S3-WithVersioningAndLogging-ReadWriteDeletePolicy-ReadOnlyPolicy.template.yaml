AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Create S3 bucket with logging enabled (also optionally enable versioning,
  create managed policies for Read-Only and Read-Write-Delete accesses).

Parameters:
  BucketName:
    Description: The name of the S3 bucket to be created.
    Type: String
  EnableLogging:
    Description: Enable logging.
    Type: String
    AllowedValues: [Enabled, Suspended]
    Default: Suspended
  EnableVersioning:
    Description: Enable versioning (Enabled or Suspended).
    Type: String
    AllowedValues: [Enabled, Suspended]
    Default: Suspended
  ServerSideEncryptionAlgorithm:
    Description: Specify server side encryption. Choose None to disable server side encryption.
    Type: String
    AllowedValues: [None, AES256, 'aws:kms']
    Default: AES256
  KMSMasterKeyID:
    Description: KMS Master Key ID. Required only if selecting aws:kms in ServerSideEncryptionAlgorithm.
    Type: String
  ReadOnlyGroupName:
    Description: Optional. Name of the Group to be created and given Read-only access to the given bucket.
    Type: String
    Default: ''
  ReadWriteDeleteGroupName:
    Description: Optional. Name of the Group to be created and given Read-Write-Delete access to the given bucket.
    Type: String
    Default: ''

Conditions:
  SSEEnabled: !Not [!Equals [None, !Ref ServerSideEncryptionAlgorithm]]
  UseKms: !Equals ['aws:kms', !Ref ServerSideEncryptionAlgorithm]
  LoggingEnabled: !Equals [Enabled, !Ref EnableLogging]
  VersioningEnabled: !Equals [Enabled, !Ref EnableVersioning]
  ReadOnlyGroupNameSpecified: !Not [!Equals ['', !Ref ReadOnlyGroupName]]
  ReadWriteDeleteGroupNameSpecified: !Not [!Equals ['', !Ref ReadWriteDeleteGroupName]]

Resources:
  S3BucketLogs:
    Type: AWS::S3::Bucket
    Condition: LoggingEnabled
    Properties:
      AccessControl: LogDeliveryWrite
      BucketName: !Sub ${BucketName}-logs
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter14Days
            Status: Enabled
            ExpirationInDays: 14
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: BucketOwnerFullControl
      BucketEncryption: !If
        - SSEEnabled
        - ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault: !If
                - UseKms
                - SSEAlgorithm: !Ref ServerSideEncryptionAlgorithm
                  KMSMasterKeyID: !Ref KMSMasterKeyID
                - SSEAlgorithm: !Ref ServerSideEncryptionAlgorithm
        - !Ref AWS::NoValue
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter30Days
            Status: Enabled
            ExpirationInDays: 30
      LoggingConfiguration: !If
        - LoggingEnabled
        - DestinationBucketName: !Ref S3BucketLogs
        - !Ref AWS::NoValue
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: !Ref EnableVersioning
    DeletionPolicy: Retain

  IamGroupReadWriteDelete:
    Type: AWS::IAM::Group
    Condition: ReadWriteDeleteGroupNameSpecified
    Properties:
      GroupName: !Ref 'ReadWriteDeleteGroupName'

  ManagedPolicyS3ReadWriteDelete:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
      - S3Bucket
    Properties:
      Description: Managed Policy for accessing S3 bucket (read/write/delete)
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:ListAllMyBuckets     # if need console access
            Resource: arn:aws:s3:::*
          - Effect: Allow
            Action:
              - s3:GetBucketLocation    # if need console access
              - s3:ListBucket           # if need to list root-level items, folders in the given bucket
            Resource: !GetAtt S3Bucket.Arn
          - Effect: Allow
            Action:
              - s3:PutObject*
              - s3:GetObject
              - s3:DeleteObject
            Resource: !Sub ${S3Bucket.Arn}/*
      Groups:
        - !If
          - ReadWriteDeleteGroupNameSpecified
          - !Ref ReadWriteDeleteGroupName
          - !Ref AWS::NoValue

  IamGroupReadOnly:
    Type: AWS::IAM::Group
    Condition: ReadOnlyGroupNameSpecified
    Properties:
      GroupName: !Ref ReadOnlyGroupName

  ManagedPolicyS3Read:
    Type: AWS::IAM::ManagedPolicy
    Condition: ReadOnlyGroupNameSpecified
    DependsOn:
      - S3Bucket
      - IamGroupReadOnly
    Properties:
      Description: Managed Policy for accessing S3 bucket (read only)
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:ListAllMyBuckets     # if need console access
            Resource: arn:aws:s3:::*
          - Effect: Allow
            Action:
              - s3:GetBucketLocation    # if need console access
              - s3:ListBucket           # if need to list root-level items, folders in the given bucket
            Resource: !GetAtt S3Bucket.Arn
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub ${S3Bucket.Arn}/*
      Groups:
        - !If
          - ReadOnlyGroupNameSpecified
          - !Ref ReadOnlyGroupName
          - !Ref AWS::NoValue

Outputs:
  BucketName:
    Description: Name of the logs bucket.
    Value: !Ref LogsBucket
    Export:
      Name: !Ref BucketExportName